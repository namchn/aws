ymlconfig:
  jwt:
    token: 
      secret: 
       key: FlRpX30pMqDbiAkmlfArbrmVkDD4RqISskGZmBFax5oGVxzXXWUzTR5JyskiHMIV9M1Oicegkpi46AdvrcX1E6CmTUBc6IFbTPiD
 
  environment:
    execution:
      mode: prod    #### dev  prod
      #mode: dev 
      #mode: prod 
      
    url:
      backend: https://api.nc2030.com 
      frontend: https://nc2030.com
       
    # 결제 반환 주소   
    pay:
      order: 
        cid: TC0ONETIME
        partner_user_id: nc2030
        approval_url: https://api.nc2030.com/pay/completed
        cancel_url: https://nc2030.com/pay/cancel
        fail_url: https://nc2030.com/pay/fail
        login_uri: https://nc2030.com/login
        basket_uri: https://nc2030.com/basketList   

###########  위쪽은 개발중인 설정값 

######################################  
#server 관련    
######################################   
server:
  port: 5000
  servlet:
    session:
      timeout: 30m
######################################  
#spring 관련    
######################################   
spring:
  #redis
  redis:
    host: redis-15535.c89.us-east-1-3.ec2.cloud.redislabs.com
    port: 15535
    username: default 
    password: sXZJLRhSSYFDAHp3EWCGULKydrKCys6b
  #mvc:
    #view:
      #prefix: /WEB-INF/jsp/
      #suffix: .jsp
  ############ test db########    
  jpa:
    database: MYSQL
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
  datasource:
    url: jdbc:mysql://${rds.hostname}:${rds.port}/${rds.db.name}
    username: ${rds.username}
    password: ${rds.password}
#logging.level:
  #org.hibernate.SQL: debug #콘솔에 남기는게 아니라 로그로 남음.
  #org.hibernate.type : trace #바인딩된 파라미터까지 볼 수 있    
############ oauth2 관련 ########    
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: 59cd774810e838538a12 
            clientSecret: fa7bfa526040453beda63f00ef5805cc3e006fe1
            #redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            redirectUri: "https://api.nc2030.com/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
    provider:
      github:
        authorization-uri: https://github.com/login/oauth/authorize
        token-uri: https://github.com/login/oauth/access_token
        user-info-uri: https://api.github.com/user
        
        
        
######################################        
##사용하기 위해서는 그래들 주입필요함.#########
#implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
#implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'  
############ mybatis 관련 #############    
mybatis:
  configuration:
    multiple-result-sets-enabled: false
    map-underscore-to-camel-case: true
    call-setters-on-nulls: true    
    jdbc-type-for-null: varchar
    default-fetch-size: 500
  # resources/mapper/ 에 있는 모든 xml 파일
  mapper-locations: mapper/**.xml           